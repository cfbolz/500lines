


### Bytecode
In Python, the set of instructions that the interpreter interprets is called _bytecode_. Bytecode is a series of bytes that the interpreter maps to different operations that it should perform. Bytecode is called an _intermediate representation_ of Python code: it expresses the source code that you wrote in a way the interpreter can understand, analogous to the way that assembly language serves as a representation between C code and a piece of hardware.

## what about PyPy
There is a efficient Python interpreter written mostly in Python, called PyPy. PyPy's structure is signficantly different from CPython's structure, and it includes many interesting optimizations. I encourage curious readers to also read the chapter about PyPy from the second edition of this book.


The steps before the interpreter (the lexer, parser, and compiler) take your code and turned it in to instructions for the interpreter. These instructions are similar to bytecode.


## Bytecode: Instructions for the interpreter
How does the interpreter know what operations it should perform?  Each frame has a _code object_, which has a collection of information.  The most important part of this information is called _bytecode_.  Bytecode is a series of bytes that the interpreter maps to certain operations that it should perform. (Bytecode is an _intermediate representation_ of Python code: it expresses the top-level Python code that you wrote in a way the interpreter can understand, analogous to the way that assembly serves as a representation between C code and a processor.)

In Python, the code object and its bytecode are exposed, so we can examine them in the REPL.  We'll take another simple function, `three`, as an example.



When the interpreter executes bytecode, it starts with the first byte. It looks up and performs the corresponding operation, then moves to the next bytecode. Most of the work of writing an interpreter is providing a complete mapping of the operations associated with each instruction. In CPython, the lookup of operations corresponding to each instruction is implemented as a giant switch statement. The switch statment has one case for each bytecode and is _1,500 lines long_.

The interpreter may land on a given bytecode zero, one, or many times. In the example above, the interpreter will either execute the first pair of `LOAD_CONST` / `RETURN_VALUE` or the second, but never both. (Looking back at the code that generated this bytecode, you can see that either the first return statement or the second will execute, but never both.)

The interpreter stops executing a particular set of bytecode when it encounters an instruction that gives up control, like `RETURN_VALUE` or `YIELD_VALUE`, or until an (unhandled) exception is raised.

Some of the bytecode instructions have arguments. If an instruction has arguments, the arguments appear in the next two bytes. The arguments have different meaning for each instruction. In this example, the arguments to `124` (`LOAD_FAST`) are `0` and `0`. In the case of `LOAD_FAST`, which is an instruction to load the value associated with a given variable name, the argument is an index into the list of variable names. For `POP_JUMP_IF_FALSE` (the instruction associated with the `if` statement), the argument is the location to jump to in the bytecode.



There are three kinds of stacks that the Python interpreter uses.  The first is the _call stack_, made up of frames. A frame is a collection of information and context for a chunk of code, typically a single function call. Each frame has two more stacks associated with it: the data stack, which contains data and objects, and a block stack, used for certain kinds of (control flow such as exception handling and looping).  The primary work of the interpreter is manipulating these three kinds of stacks.


The interpreter needs to keep track of a few things beyond the call stack, like the exception state, the current frame, and the values to be passed between frames.

Information on the frame includes the the code object for the frame, .


#### cruft / possible footnotes
. [footnote? You may have heard of PyPy, a prominent Python interpreter written in Python. The structure of PyPy is covered in volume 2 of AOSA, by Benjamin Peterson. Before optimzations, PyPy is four times slower than the CPython interpreter.] One advantage of writing our Python interpreter in Python is that we don't have to also implement an object system - we can seamlessly fall back to the "real" Python's object system.




### What can we actually do with this? Pick an interesting example and scope the code to just those bytecode instructions, maybe?
